@model IndInv.Models.ViewModels.indexViewModel
@{
    ViewBag.Title = "Search Results";
}

<div class="row">
    <a class="button" href="index">Back</a>
</div>

<div class="row">
<table id="indicators">
    <thead>
    <tr>
        <th >
            @Html.DisplayNameFor(model => model.allIndicators.First().Indicator_CoE_Map.First().CoE.CoE)
        </th>
        <th class="hide-for-small-only">
            @Html.DisplayNameFor(model => model.allIndicators.FirstOrDefault().Area)
        </th>
        <th class="hide-for-small-only">
            @Html.DisplayNameFor(model => model.allIndicators.FirstOrDefault().Indicator_Type)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.allIndicators.FirstOrDefault().Indicator)
        </th>
        <th></th>
    </tr>
    </thead>

    <tbody>
        @foreach (var item in Model.allIndicators.OrderBy(x => x.Indicator))
        {
            <tr>
                <td>
                    <strong>
                    @foreach (var map in item.Indicator_CoE_Map.Where(x => x.Indicator_ID == item.Indicator_ID))
                    {
                        <li style="list-style:none">@Html.DisplayTextFor(modelItem => item.Indicator_CoE_Map.FirstOrDefault().CoE.CoE)</li>
                    }
                    </strong>
                </td>
                <td class="hide-for-small-only">
                    @Html.DisplayTextFor(modelItem => item.Area.Area)
                </td>
                <td class="hide-for-small-only">
                    @Html.DisplayTextFor(modelItem => item.Indicator_Type)
                </td>
                <td>
                    <span class="show-for-medium-up">
                        @Html.DisplayTextFor(modelItem => item.Indicator)
                    </span>
                    <div class="show-for-small-only">
                        <strong>
                            @Html.DisplayTextFor(modelItem => item.Indicator)
                        </strong>
                        <li style="list-style:none"><sub>@Html.DisplayTextFor(modelItem => item.Area.Area)</sub></li>
                        <li style="list-style:none"><sub>@Html.DisplayTextFor(modelItem => item.Indicator_Type)</sub></li>
                    </div>
                </td>

                <td>
                    <div class="row">
                    <div class="large-12 small-12 columns" style="text-align:center; padding:2px">@Html.ActionLink("Edit", "Edit", new { Indicator_ID = item.Indicator_ID }, new { @class = "round alert label" })</div>    
                    <div class="large-12 small-12 columns" style="text-align:center; padding:2px">@Html.ActionLink("Details", "Details", new { Indicator_ID = item.Indicator_ID }, new { @class = "round alert label" })</div>
                    <div class="large-12 small-12 columns" style="text-align:center; padding:2px">@Html.ActionLink("Delete", "Delete", new { Indicator_ID = item.Indicator_ID }, new { @class = "round alert label" })</div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>
</div>

<script src="../../Scripts/jquery-1.11.0.min.js"></script>
<script src="../../Scripts/jquery.tablesorter.min.js"></script>
<script type="text/javascript">
    $(document).ready(function ($) {
        $theTable = $('#indicators')
            .tablesorter();

    });

    $("#searchButton").click(function ($) {
        var parameters = [];
        var coes = [];
        var areas = [];
        var types = [];
        @foreach (var coe in Model.allCoEs)
        {
            @:if(jQuery("#CoE_@Html.DisplayTextFor(model => coe.CoE_ID)").is(':checked')){
            @:  coes.push({ CoE_ID : @Html.DisplayTextFor(model => coe.CoE_ID) })    
            @:}
        }
        @foreach (var area in Model.allAreas)
        {
            @:if(jQuery("#Area_@Html.DisplayTextFor(model => area.Area_ID)").is(':checked')){
            @:  areas.push({ Area_ID : @Html.DisplayTextFor(model => area.Area_ID) })    
            @:}
        }
        @foreach (var type in Model.allIndicators.Select(x => x.Indicator_Type).OrderBy(x => x).Distinct())
        {
            string typeClean = (type == null) ? null : type.Replace("/", "");
            typeClean = (typeClean == null) ? null : typeClean.Replace("&", "");
            typeClean = (typeClean == null) ? null : typeClean.Replace(" ", "");
            @:if(jQuery("#Type_@Html.DisplayTextFor(model => typeClean)").is(':checked')){
            @:  types.push({ Indicator_Type : "@Html.DisplayTextFor(model => typeClean)" })    
            @:}
        }
        parameters.push({
            searchString: jQuery("#searchString").val(),
            selectedCoEs: coes,
            selectedAreas: areas,
            selectedTypes: types
        })
        jQuery.ajax({
            url: "/indicator/searchAdvanced",
            type: 'POST',
            data: JSON.stringify(parameters),
            contentType: 'application/json; charset=utf-8',
            success: function(data){
                window.location.href = data;
            },
            error: function (request){
                alert("search Failed")
            }
        });
    });
</script>