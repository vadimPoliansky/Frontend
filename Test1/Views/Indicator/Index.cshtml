@model IndInv.Models.ViewModels.indexViewModel
@{
    ViewBag.Title = "Indicator Inventory";
}

<link rel="stylesheet" href="../../Content/Icons/foundation-icons.css" />

<br />
<br />
<br />
<div class="row">
    <div class="row">
        <div class="small-offset-1 small-9 columns" style="padding:0px"> 
            <input type="text" placeholder="Search Indicators" id="searchString">        
        </div>
        <div class="small-2 columns" style="padding:0px">
            <a class="button tiny" id="searchButton" style="font-size:14px"><!--i class="step fi-magnifying-glass size-12"-->Search</i></a>
        </div>
    </div>
    <div class="row" style="text-align:center">
        <!--a class="button" id="searchButton">Search</a-->
        <a class="button" data-dropdown="advancedSearchView">Advanced Search Options &raquo;</a>
    </div>

    <div class="f-dropdown content large" data-options="align:left" data-dropdown-content="" id="advancedSearchView">
    <div class="row">
        <fieldset>
            <legend>Areas</legend>
            @foreach(var area in  Model.allAreas.OrderBy(x => x.Area)){
                <div class="small-12 large-4 columns">
                    <li style="list-style:none"><input id="Area_@Html.DisplayTextFor(model => area.Area_ID)" type="checkbox"><label for="Area_@Html.DisplayTextFor(model => area.Area_ID)">@Html.DisplayTextFor(model => area.Area)</label></li>
                </div>
            }
        </fieldset>
        <fieldset>
            <legend>CoEs</legend>
            @foreach (var coe in Model.allCoEs.OrderBy(x => x.CoE))
            {
                <div class="small-12 large-4 columns">
                    <li style="list-style:none"><input id="CoE_@Html.DisplayTextFor(model => coe.CoE_ID)" type="checkbox"><label for="CoE_@Html.DisplayTextFor(model => coe.CoE_ID)">@Html.DisplayTextFor(model => coe.CoE)</label></li>
                </div>
            }
        </fieldset>
        <fieldset>
            <legend>Indicator Types</legend>
            @foreach (var type in Model.allIndicators.Select(x => x.Indicator_Type).OrderBy(x => x).Distinct())
            {
                string typeClean = (type == null) ? null : type.Replace("/", "");
                typeClean = (typeClean == null) ? null : typeClean.Replace("&", "");
                typeClean = (typeClean == null) ? null : typeClean.Replace(" ", "");
                <div class="small-12 large-4 columns">
                    <li style="list-style:none"><input id="Type_@Html.DisplayTextFor(model => typeClean)" type="checkbox"><label for="Type_@Html.DisplayTextFor(model => typeClean)">@Html.DisplayTextFor(model => type)</label></li>
                </div>
            }
        </fieldset>
        </div>
    </div>
</div>

<script src="../../Scripts/jquery-1.11.0.min.js"></script>
<script src="../../Scripts/jquery.tablesorter.min.js"></script>
<script type="text/javascript">
    $(document).ready(function ($) {
        $theTable = $('#indicators')
            .tablesorter();

    });

    $("#searchButton").click(function ($) {
        var parameters = [];
        var coes = [];
        var areas = [];
        var types = [];
        @foreach (var coe in Model.allCoEs)
        {
            @:if(jQuery("#CoE_@Html.DisplayTextFor(model => coe.CoE_ID)").is(':checked')){
            @:  coes.push({ CoE_ID : @Html.DisplayTextFor(model => coe.CoE_ID) })    
            @:}
        }
        @foreach (var area in Model.allAreas)
        {
            @:if(jQuery("#Area_@Html.DisplayTextFor(model => area.Area_ID)").is(':checked')){
            @:  areas.push({ Area_ID : @Html.DisplayTextFor(model => area.Area_ID) })    
            @:}
        }
        @foreach (var type in Model.allIndicators.Select(x => x.Indicator_Type).OrderBy(x => x).Distinct())
        {
            string typeClean = (type == null) ? null : type.Replace("/", "");
            typeClean = (typeClean == null) ? null : typeClean.Replace("&", "");
            typeClean = (typeClean == null) ? null : typeClean.Replace(" ", "");
            @:if(jQuery("#Type_@Html.DisplayTextFor(model => typeClean)").is(':checked')){
            @:  types.push({ Indicator_Type : "@Html.DisplayTextFor(model => typeClean)" })    
            @:}
        }
        parameters.push({
            searchString: jQuery("#searchString").val(),
            selectedCoEs: coes,
            selectedAreas: areas,
            selectedTypes: types
        })
        jQuery.ajax({
            url: "/indicator/searchAdvanced",
            type: 'POST',
            data: JSON.stringify(parameters),
            contentType: 'application/json; charset=utf-8',
            success: function(data){
                window.location.href = data;
            },
            error: function (request){
                alert("search Failed")
            }
        });
    });
</script>