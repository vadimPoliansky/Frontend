@model IndInv.Models.ViewModels.GraphViewModel
@using IndInv.Helpers;
@{
    ViewBag.Title = "Details";
    ViewBag.fiscalYear = Model.Fiscal_Year;
}

<div class="container">
    @*<div class="indicatorTitle">@Html.DisplayTextFor(model => model.Indicator)</div>*@
    <div class="button-pane-background">
        <div class="button button-pane-1">Quaterly</div>
        <div class="button button-pane-2">Annualy</div>
    </div>
    <div class="chart-background-overlay">
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
    </div>
    <div class="chart-pane chart-pane-1">
    <div class="chart-background">
        <div class="row chart-1-row">

            <!--div id="chart1" style="margin-top: 20px; margin-left: 20px; width: 100%; height: 100%;"></div-->
            <div id="chartTest" style="width:100%; height:400px;"></div>

            <pre class="code brush:js"></pre>
        </div>
    </div>
    <div class="row row-summary">

        <br />
        <div class="small-6 columns">
            <span class="target">@Html.DisplayTextFor(model => model.Target)</span>
            <span class="targetLabel">Target</span>
        </div>
        <div class="small-6 columns">
            <span class="comparator">@Html.DisplayTextFor(model => model.Comparator)</span>
            <span class="comparatorLabel">Comparator</span>
        </div>
    </div>
    <br />
    </div>
    <div class="chart-pane chart-pane-2">
    <div class="chart-background">
        <div class="row chart-2-row">

            <!--div id="chart1" style="margin-top: 20px; margin-left: 20px; width: 100%; height: 100%;"></div-->
            <div id="chartTest2" style="width:100%; height:400px;"></div>

            <pre class="code brush:js"></pre>
        </div>
    </div>
    <div class="row row-summary">

        <div class="small-12 columns">
            <table class="target-table">
                <tr>
                    <td></td>
                    <td >Target</td>
                    <td >Comparator</td>
                </tr>
                <tr>
                    <td>@FiscalYear.FYStrFullFormated("FY_3",Model.Fiscal_Year)</td>
                    <td ></td>
                    <td ></td>
                </tr>
                <tr>
                    <td>@FiscalYear.FYStrFullFormated("FY_2",Model.Fiscal_Year)</td>
                    <td ></td>
                    <td ></td>
                </tr>
                <tr>
                    <td>@FiscalYear.FYStrFullFormated("FY_1",Model.Fiscal_Year)</td>
                    <td ></td>
                    <td ></td>
                </tr>
                <tr>
                    <td>@FiscalYear.FYStrFullFormated("FY_0",Model.Fiscal_Year)</td>
                    <td >@Html.DisplayTextFor(model => model.Target)</td>
                    <td >@Html.DisplayTextFor(model => model.Comparator)</td>
                </tr>
            </table>
        </div>
    </div>
    </div>
</div>

<script src="../../Scripts/jquery-1.11.0.min.js"></script>
<!--script src="../../Scripts/jquery.jqplot.min.js"></script-->

<script src="~/Scripts/highcharts.js"></script>
<!--script src="http://code.highcharts.com/modules/exporting.js"></script-->

<!--[if lt IE 9]><script language="javascript" type="text/javascript" src="../../Scripts/excanvas.js"></script><![endif]-->
<!--script src="../../Scripts/jq_plugins/jqplot.barRenderer.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.categoryAxisRenderer.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.pointLabels.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.canvasOverlay.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.canvasOverlay.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.dateAxisRenderer.min.js"></script-->

<link rel="stylesheet" media="screen" href="../../Scripts/jquery.jqplot.min.css" />

<style type="text/css">

    .button {
	    -moz-box-shadow:inset 0px 1px 0px 0px #54a3f7;
	    -webkit-box-shadow:inset 0px 1px 0px 0px #54a3f7;
	    box-shadow:inset 0px 1px 0px 0px #54a3f7;
	    background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #007dc1), color-stop(1, #0061a7));
	    background:-moz-linear-gradient(top, #007dc1 5%, #0061a7 100%);
	    background:-webkit-linear-gradient(top, #007dc1 5%, #0061a7 100%);
	    background:-o-linear-gradient(top, #007dc1 5%, #0061a7 100%);
	    background:-ms-linear-gradient(top, #007dc1 5%, #0061a7 100%);
	    background:linear-gradient(to bottom, #007dc1 5%, #0061a7 100%);
	    filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#007dc1', endColorstr='#0061a7',GradientType=0);
	    background-color:#007dc1;
	    -moz-border-radius:3px;
	    -webkit-border-radius:3px;
	    border-radius:3px;
	    border:1px solid #124d77;
	    display:inline-block;
	    cursor:pointer;
	    color:#ffffff;
	    font-family:arial;
	    font-size:13px;
	    padding:6px 24px;
        margin:0;
	    text-decoration:none;
	    text-shadow:0px 1px 0px #154682;
    }
    .button:hover {
	    background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #0061a7), color-stop(1, #007dc1));
	    background:-moz-linear-gradient(top, #0061a7 5%, #007dc1 100%);
	    background:-webkit-linear-gradient(top, #0061a7 5%, #007dc1 100%);
	    background:-o-linear-gradient(top, #0061a7 5%, #007dc1 100%);
	    background:-ms-linear-gradient(top, #0061a7 5%, #007dc1 100%);
	    background:linear-gradient(to bottom, #0061a7 5%, #007dc1 100%);
	    filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#0061a7', endColorstr='#007dc1',GradientType=0);
	    background-color:#0061a7;
    }
    .button:active {
	    position:relative;
	    top:1px;
    }

    .button-pane-background {
        background-color:#2D3947;
        width:100%;
    }
    .chart-pane {
        background-color:#fff;
    }



    .container {
        overflow:visible;
        text-align:center;
    }

    .indicatorTitle {
        font-size:large;
        color:white;
        background:#2D3947;
        padding:20px 10px 20px 10px;
        font-weight:300;
    }

    #chartTest tspan, #chartTest text, #chartTest2 tspan, #chartTest2 text {
        font-family: 'Open Sans', sans-serif;
    }

    .chart-background {
        background-color:#2D3947;
        width:100%;
        padding-bottom:50px;
        text-align:center;
    }
    .chart-background-overlay {
        height:450px;
        position:absolute;
        background-color:#2D3947;
        width:100%;
        padding-bottom:50px;
        text-align:center;
    }

    .target {
        display: table;
        margin: 0 auto;
        font-size:large;
        color: #ff0000;
    }

    .targetLabel {
        display: table;
        margin: 0 auto;
        font-size:small;
        color: #8c8c95;
    }

    .comparator {
        display: table;
        margin: 0 auto;
        font-size:large;
        color: #ff6a00;
    }

    .comparatorLabel {
        display: table;
        margin: 0 auto;
        font-size:small;
        color: #8c8c95;
    }

    .target-table {
        border:0px;
        width:100%;
        display: table;
        margin-top:20px;
        color: #222;
        font-size: 0.5em;
        font-size: 0.875rem;
        padding: 0.5625rem 0.625rem;
    }
    .target-table > tbody > tr:nth-of-type(even) {
        background: none !important;
    }
    .target-table > tbody > tr > td {
        width:33%;
    }

    .lt-ie9 .target-table td {
        padding:0.5625em 0.625em;
    }


        .target-table > tbody > tr > td:first-child, .target-table > tbody > tr:first-child {
            font-weight:bold;
            text-align:center;
            color:#8c8c95;
        }

        .target-table > tbody > tr > td:first-child + td, .target-table > tbody > tr:first-child + tr {
            color:#ff0000;
            text-align:center;
        }
        .target-table > tbody > tr > td:first-child + td + td, .target-table > tbody > tr:first-child + tr + tr {
            color:#ff6a00;
            text-align:center;
        }

    .jqplot-point-label {
        font-size:xx-small !important;
        font-weight:700;
        color:#fff;
        /*background-color:rgba(32,92,144,0.8);*/
        
    }

    .jqplot-axis {
        font-size:xx-small !important;
        font-weight:700;
        color:#fff;
    }

    .jqplot-target {
        margin:0px !important;
    }

    .jqplot-yaxis {
        margin-left:5px;
    }

    .jqplot-grid-canvas {
        background-color:#2D3947;
        z-index:-100;
        border:none !important;
        padding-bottom:5px;
    }

</style>


<script>
    $(document).ready(function ($) {
        
        var currency = false;
        var time = false;
        var precision;

        var valuesArrayString = [
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q1)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q2)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q3)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q4)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_3_YTD)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_3_YTD)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_2_YTD)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_1_YTD)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_YTD)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.Target)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.Comparator)).ToString())",
        ];
        for (i = 0; i < valuesArrayString.length; i++) {
            if (valuesArrayString[i] != null) {
                precision = valuesArrayString[i].indexOf('.') != -1 ? valuesArrayString[i].split('.')[1].length : 0;
            }
            /*
            //if(valuesArrayString[i].indexOf("$") != -1){
            if ($.inArray("$", valuesArrayString[i]) != -1) {
                currency=true;
                i = valuesArrayString.length;
            }
            if ($.inArray(":", valuesArrayString[i]) != -1) {
                time=true;
                i = valuesArrayString.length;
            }*/
        }

        @*var valuesArrayLengthString = [
            @Html.DisplayTextFor(model => model.FY_13_14_Q1).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q2).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q3).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q4).ToString().Replace(".","").Length,
        ];
        //var axisLength = Math.max.apply(Math, valuesArrayLengthString);
        //alert(axisLength);*@
        var chartWidth = 300 - 20 - 20;

        var valuesArray = [
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q1)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q1)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q2)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q2)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q3)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q3)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q4)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q4)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_1_YTD)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_1_YTD)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_2_YTD)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_2_YTD)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_3_YTD)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_3_YTD)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_YTD)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_YTD)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Target)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Target)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Comparator)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Comparator)).ToString())", 10)
        ];

        /*polyfill*/
        if (!Array.prototype.filter) {
            Array.prototype.filter = function (fun /*, thisp */) {
                "use strict";

                if (this === void 0 || this === null)
                    throw new TypeError();

                var t = Object(this);
                var len = t.length >>> 0;
                if (typeof fun !== "function")
                    throw new TypeError();

                var res = [];
                var thisp = arguments[1];
                for (var i = 0; i < len; i++) {
                    if (i in t) {
                        var val = t[i]; // in case fun mutates this
                        if (fun.call(thisp, val, i, t))
                            res.push(val);
                    }
                }

                return res;
            };
        }

        function remove(arrOriginal, elementToRemove) {
            return arrOriginal.filter(function (el) { return el !== elementToRemove });
        }

        var maxYarray = Math.max.apply(Math, valuesArray) + 0.01;
        var maxY = maxYarray;
        var maxLog = Math.pow(10, Math.floor(Math.log(maxY / 2) / Math.log(10))) / 2
        if (maxY == 1) { precision = 1 }
        maxY = Math.abs(maxYarray) > 1 ? Math.ceil(maxYarray / maxLog) * maxLog : maxYarray;

        var minY = Math.min.apply(Math, remove(valuesArray, 0));
        minY = Math.abs(minY) > 1 ? Math.floor(minY / 10) * 10 : minY
        minY = minY < 0 ? minY : 0;

        var tickInterval = Math.pow(10, Math.floor(Math.log(maxY / 2 - 0.01) / Math.log(10)));
        tickInterval = maxY / tickInterval > 10 ? tickInterval * 2 : tickInterval;
        tickInterval = maxY / tickInterval < 5 ? tickInterval / 2 : tickInterval;
        maxY = maxY % tickInterval === 0 ? maxY : maxY + tickInterval / 2;
        maxY = maxY / maxYarray > 2 ? maxY / 2 : maxY;

        var s1 = [
            valuesArray[0],
            valuesArray[1],
            valuesArray[2],
            valuesArray[3],
        ];
        var s2 = [
            valuesArray[4],
            valuesArray[5],
            valuesArray[6],
            valuesArray[7],
        ];

        var sComparator = [
            0,
            0,
            0,
            valuesArray[9],
        ];

        var sTarget = [
            0,
            0,
            0,
            valuesArray[8],
        ];

        var sComparatorYTD = [
            valuesArray[9],
            valuesArray[9],
            valuesArray[9],
            valuesArray[9],
        ];

        var sTargetYTD = [
            valuesArray[8],
            valuesArray[8],
            valuesArray[8],
            valuesArray[8],
        ];

        var comparator_FY = valuesArray[9]
        var target_FY = valuesArray[8]

        var target_4 = valuesArray[8]

        var ticks1 = ['Q1', 'Q2', 'Q3', 'Q4'];
        //var ticks2 = ['FY2010', 'FY2011', 'FY2012', 'FY2013 YTD'];
        var ticks2 = [
            '@FiscalYear.FYStrFullFormated("FY_3",Model.Fiscal_Year)', 
            '@FiscalYear.FYStrFullFormated("FY_2",Model.Fiscal_Year)',
            '@FiscalYear.FYStrFullFormated("FY_1",Model.Fiscal_Year)',
            '@FiscalYear.FYStrFullFormated("FY_0",Model.Fiscal_Year)',
        ];

        $(function () {

            Highcharts.setOptions({
                colors: ['#368EBE', "#0094fe"],
                chart: {
                    renderTo: 'chartTest',
                    type: 'column',
                    backgroundColor: "#2D3947"
                },
                title: {
                    style: {
                        color: '#fff'
                    }
                },
                subtitle: {
                    style: {
                        color: '#8c8c95'
                    }
                },
                plotOptions: {
                    column: {
                        stacking: 'normal'
                    },
                    series: {
                        states: {
                            hover: {
                                enabled: false
                            }
                        },
                        dataLabels: {
                            enabled: true,
                            inside: true,
                            color: '#fff'
                        },
                        borderWidth: 0,
                        shadow: false
                    }
                },
                tooltip: {
                    enabled: false
                },
                xAxis: {
                    labels: {
                        style: {
                            color: '#fff'
                        }
                    }
                },
                yAxis: {
                    gridLineColor: '#5C5C63',
                    gridLineWidth: 1,
                    labels: {
                        style: {
                            color: '#fff'
                        }
                    }
                }
            });

            var chart1 = new Highcharts.Chart({
                title: {
                    text: '@Html.DisplayTextFor(model => model.Indicator)'
                },
                subtitle: {
                    text: 'for ' + '@FiscalYear.FYStrFullFormated("FY_0", Model.Fiscal_Year)',
                },
                xAxis: {
                    categories: ticks1,
                    tickLength: 0,
                },
                yAxis: [{
                    title: {
                        text: ''
                    },
                    max: maxY,
                    plotLines: [{
                        color: '#ff6500',
                        value: sComparatorYTD[0],
                        width: '2',
                        percentFrom: 0,
                        percentTo: 0.25
                    }, {
                        color: '#ff6500',
                        value: sComparatorYTD[1],
                        width: '2',
                        percentFrom: 0.25,
                        percentTo: 0.5
                    }, {
                        color: '#ff6500',
                        value: sComparatorYTD[2],
                        width: '2',
                        percentFrom: 0.5,
                        percentTo: 0.75
                    }, {
                        color: '#ff6500',
                        value: sComparatorYTD[3],
                        width: '2',
                        percentFrom: 0.75,
                        percentTo: 1
                    }, {
                        color: 'red',
                        value: sTargetYTD[0],
                        width: '2',
                        percentFrom: 0,
                        percentTo: 0.25
                    }, {
                        color: 'red',
                        value: sTargetYTD[1],
                        width: '2',
                        percentFrom: 0.25,
                        percentTo: 0.5
                    }, {
                        color: 'red',
                        value: sTargetYTD[2],
                        width: '2',
                        percentFrom: 0.5,
                        percentTo: 0.75
                    }, {
                        color: 'red',
                        value: sTargetYTD[3],
                        width: '2',
                        percentFrom: 0.75,
                        percentTo: 1
                    }]
                }],
                series: [{
                    name: '@Html.DisplayTextFor(model => model.Indicator)',
                    data: s1,
                    index: 50
                }],
                legend: [{
                    enabled: 'false'
                }],
                credits: [{
                    enabled: 'false'
                }]
            });

            var chart2 = new Highcharts.Chart({
                chart: {
                    renderTo: 'chartTest2',
                    type: 'column',
                    backgroundColor: "#2D3947"
                },
                title: {
                    text: '@Html.DisplayTextFor(model => model.Indicator)'
                },
                subtitle: {
                    text: 'from ' + '@FiscalYear.FYStrFullFormated("FY_3", Model.Fiscal_Year) to @FiscalYear.FYStrFullFormated("FY_0", Model.Fiscal_Year)'
                },
                xAxis: {
                    categories: ticks2,
                    tickLength: 0
                },
                yAxis: {
                    title: {
                        text: ''
                    },
                    max: maxY,
                    plotLines: [{
                        color: '#ff6500',
                        value: sComparator[3],
                        width: '2',
                        percentFrom: 0.75,
                        percentTo: 1
                    }, {
                        color: 'red',
                        value: sTarget[3],
                        width: '2',
                        percentFrom: 0.75,
                        percentTo: 1
                    }]
                },
                series: [{
                    name: '@Html.DisplayTextFor(model => model.Indicator)',
                    data: s2
                }],
                legend: [{
                    enabled: 'false'
                }],
                credits: [{
                    enabled: 'false'
                }]
            });
            $('.button-pane-1').on('click', function () {
                $('.chart-pane-2').hide("fade");
                $('.chart-pane-1').show("fade");
            });
            $('.button-pane-2').on('click', function () {
                $('.chart-pane-1').hide("fade");
                $('.chart-pane-2').show("fade");
            });
            setTimeout(function () {
                $('.chart-pane-2').hide();
            }, 200);

        });
        $(window).resize(function () {
            height = chart1.height
            width = $(".chart-1-row").width() / 2
            chart1.setSize(width, height, doAnimation = true);
            height = chart2.height
            width = $(".chart-2-row").width() / 2
            chart2.setSize(width, height, doAnimation = true);
        });
    });
</script>