@model IndInv.Models.Indicators
@using IndInv.Helpers;
@{
    ViewBag.Title = "Details";
}
<div class="row">
    <a class="button" href="searchResults">Back</a>
</div>

    <div class="row">
        <h1>@Html.DisplayTextFor(model => model.Indicator) </h1>
    </div>
    <div class="row">
    @{var i = 1;}
    @foreach (var footnote in Model.Indicator_Footnote_Map.Where(x => x.Indicator_ID == Model.Indicator_ID))
    {
        <sup>
        @i.
        <span>  </span>@Html.DisplayTextFor(model => footnote.Footnote.Footnote)
        </sup>
        i++;
    }
    </div>
    <br />
    <div class="row">
    @foreach(var map in Model.Indicator_CoE_Map.Where(x => x.Indicator_ID == Model.Indicator_ID)){
        <div class="round alert label"><h6 class="subheader" style="color:White">
       @Html.DisplayTextFor(model => map.CoE.CoE)
        </h6></div>
    }

    </div>
<div class="row">
<div id="chart1" style="margin-top:20px; margin-left:20px; width:300px; height:400px;"></div>
<pre class="code brush:js"></pre>
</div> 
<div class="row">
<br />
<div class="small-offset-1">
<table>
    <tr>
        <td>Target</td>
        <td>Comparator</td>
    </tr>
    <tr>
        <td style="color:#111">@Html.DisplayTextFor(model => model.Target)</td>
        <td style="color:#111">@Html.DisplayTextFor(model => model.Comparator)</td>
    </tr>
</table>
</div>
</div>

<div class="row">
<div id="chart2" style="margin-top:20px; margin-left:20px; width:300px; height:400px;"></div>
<pre class="code brush:js"></pre>
</div> 
<div class="row">
<br />
<div class="small-offset-1">
<table>
    <tr>
        <td></td>
        <td style="color:#111; text-align:center">Target</td>
        <td style="color:#111; text-align:center">Comparator</td>
    </tr>
    <tr>
        <td>2010</td>
        <td style="color:#111; text-align:center"></td>
        <td style="color:#111; text-align:center"></td>
    </tr>
    <tr>
        <td>2011</td>
        <td style="color:#111; text-align:center"></td>
        <td style="color:#111; text-align:center"></td>
    </tr>
    <tr>
        <td>2012</td>
        <td style="color:#111; text-align:center"></td>
        <td style="color:#111; text-align:center"></td>
    </tr>
    <tr>
        <td>2013</td>
        <td style="color:#111; text-align:center">@Html.DisplayTextFor(model => model.Target)</td>
        <td style="color:#111; text-align:center">@Html.DisplayTextFor(model => model.Comparator)</td>
    </tr>
</table>
</div>
</div>

<div class="row">
<fieldset>
    <legend>Details</legend>
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Indicator)
         </h5></b>
        @Html.DisplayTextFor(model => model.Indicator)
    </div>
    <br />
    <div class="panel">
        <h5><b>
            @Html.DisplayNameFor(model => model.Area_ID)
        </h5></b>
        @Html.DisplayTextFor(model => model.Area_ID)
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.FY_10_11)
         </h5></b>
        @Html.DisplayTextFor(model => model.FY_10_11)
        <sup>@Html.DisplayTextFor(model => model.FY_10_11_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.FY_11_12)
         </b></h5>
        @Html.DisplayTextFor(model => model.FY_11_12)
        <sup>@Html.DisplayTextFor(model => model.FY_11_12_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.FY_12_13)
         </h5></b>
        @Html.DisplayTextFor(model => model.FY_12_13)
        <sup>@Html.DisplayTextFor(model => model.FY_12_13_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.FY_13_14_Q1)
         </h5></b>
        @Html.DisplayTextFor(model => model.FY_13_14_Q1)
        <sup>@Html.DisplayTextFor(model => model.FY_13_14_Q1_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.FY_13_14_Q2)
         </h5></b>
        @Html.DisplayTextFor(model => model.FY_13_14_Q2)
        <sup>@Html.DisplayTextFor(model => model.FY_13_14_Q2_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.FY_13_14_Q3)
         </h5></b>
        @Html.DisplayTextFor(model => model.FY_13_14_Q3)
        <sup>@Html.DisplayTextFor(model => model.FY_13_14_Q3_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.FY_13_14_Q4)
         </h5></b>
        @Html.DisplayTextFor(model => model.FY_13_14_Q4)
        <sup>@Html.DisplayTextFor(model => model.FY_13_14_Q4_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.FY_13_14_YTD)
         </h5></b>
        @Html.DisplayTextFor(model => model.FY_13_14_YTD)
        <sup>@Html.DisplayTextFor(model => model.FY_13_14_YTD_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Target)
         </h5></b>
        @Html.DisplayTextFor(model => model.Target)
        <sup>@Html.DisplayTextFor(model => model.Target_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Comparator)
         </h5></b>
        @Html.DisplayTextFor(model => model.Comparator)
        <sup>@Html.DisplayTextFor(model => model.Comparator_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Performance_Threshold)
         </h5></b>
        @Html.DisplayTextFor(model => model.Performance_Threshold)
        <sup>@Html.DisplayTextFor(model => model.Performance_Threshold_Sup)</sup>
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Definition_Calculation)
         </h5></b>
        @Html.DisplayTextFor(model => model.Definition_Calculation)
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Target_Rationale)
         </h5></b>
        @Html.DisplayTextFor(model => model.Target_Rationale)
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Comparator_Source)
         </h5></b>
        @Html.DisplayTextFor(model => model.Comparator_Source)
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Data_Source_MSH)
         </h5></b>
        @Html.DisplayTextFor(model => model.Data_Source_MSH)
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.Data_Source_Benchmark)
         </h5></b>
        @Html.DisplayTextFor(model => model.Data_Source_Benchmark)
    </div>
    <br />
    <div class="panel">
        <h5><b>
         @Html.DisplayNameFor(model => model.OPEO_Lead)
         </h5></b>
        @Html.DisplayTextFor(model => model.OPEO_Lead)
    </div>
    <br />
</fieldset>
</div>
<div class="row">
<p>
    @Html.ActionLink("Edit", "Edit", new { Indicator_ID = Model.Indicator_ID }) |
    @Html.ActionLink("Back to List", "Index")
</p>
</div>

<script src="../../Scripts/jquery-1.11.0.min.js"></script>
<script src="../../Scripts/jquery.jqplot.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.barRenderer.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.categoryAxisRenderer.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.pointLabels.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.canvasOverlay.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.canvasOverlay.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.dateAxisRenderer.min.js"></script>

<link rel="stylesheet" media="screen" href="../../Scripts/jquery.jqplot.min.css" />

<style type="text/css">
#chart1 .jqplot-point-label 
{
    color:fff;
    font-size:12;
    font-weight:bold;
    background-color:rgba(32,92,144,0.8);
    
}
#chart2 .jqplot-point-label 
{
    color:fff;
    font-size:12;
    font-weight:bold;
    background-color:rgba(32,92,144,0.8);
}
#chart2 .jqplot-table-legend-label
{

}
</style>

<script>
    $(document).ready(function ($) {

        var lineWidthInt = 2;

        var currency=false;
        var time=false;
        var precision;

        var valuesArrayString = [
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_13_14_Q1)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_13_14_Q2)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_13_14_Q3)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_13_14_Q4)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_10_11)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_10_11)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_11_12)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_12_13)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_13_14_YTD)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.Target)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.Comparator)).ToString())",
        ];
        for(i=0;i<valuesArrayString.length;i++){
            if (valuesArrayString[i] != null) {
                precision = valuesArrayString[i].indexOf('.') != -1 ? valuesArrayString[i].split('.')[1].length : 0;
            }

            if(valuesArrayString[i].indexOf("$") != -1){
                currency=true;
                i = valuesArrayString.length;
            }
            if(valuesArrayString[i].indexOf(":") != -1){
                time=true;
                i = valuesArrayString.length;
            }
        }

        @*var valuesArrayLengthString = [
            @Html.DisplayTextFor(model => model.FY_13_14_Q1).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q2).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q3).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q4).ToString().Replace(".","").Length,
        ];
        //var axisLength = Math.max.apply(Math, valuesArrayLengthString);
        //alert(axisLength);*@
        var chartWidth = 300 - 20 - 20;

        var valuesArray = [
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_Q1)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_Q1)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_Q2)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_Q2)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_Q3)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_Q3)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_Q4)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_Q4)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_10_11)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_10_11)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_11_12)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_11_12)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_12_13)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_12_13)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_YTD)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_13_14_YTD)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Target)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Target)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Comparator)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Comparator)).ToString())", 10)
        ];

        function remove(arrOriginal, elementToRemove) {
            return arrOriginal.filter(function (el) { return el !== elementToRemove });
        }

        var maxYarray = Math.max.apply(Math, valuesArray)+0.01;
        var maxY = maxYarray;
        var maxLog = Math.pow(10,Math.floor(Math.log(maxY / 2)/Math.log(10)))/2
        if (maxY == 1){ precision = 1 }
        maxY = Math.abs(maxYarray) > 1 ? Math.ceil(maxYarray/maxLog)*maxLog : maxYarray;

        var minY = Math.min.apply(Math, remove(valuesArray, 0));
        minY = Math.abs(minY) > 1 ? Math.floor(minY/10)*10 : minY
        minY = minY < 0 ? minY : 0;

        var tickInterval = Math.pow(10,Math.floor(Math.log(maxY/2 - 0.01)/Math.log(10)));
        tickInterval = maxY / tickInterval > 10 ? tickInterval * 2 : tickInterval;
        tickInterval = maxY / tickInterval < 5 ? tickInterval / 2 : tickInterval;
        maxY = maxY % tickInterval === 0 ? maxY : maxY + tickInterval/2;
        maxY = maxY / maxYarray > 2 ? maxY / 2 : maxY;
        
        var s1 = [
                valuesArray[0],
                valuesArray[1],
                valuesArray[2],
                valuesArray[3],
            ];
        var s2 = [
                valuesArray[4],
                valuesArray[5],
                valuesArray[6],
                valuesArray[7],
            ];
        var sComparator = [
            0,
            0,
            0,
            valuesArray[9],
        ];
        
        var comparator_FY = valuesArray[9]
        var target_FY = valuesArray[8]

        var target_4 = valuesArray[8]

        var ticks1 = ['Q1', 'Q2', 'Q3', 'Q4'];
        var ticks2 = ['FY2010', 'FY2011', 'FY2012', 'FY2013 YTD'];

        var plot1 = $.jqplot('chart1', [s1], {
            series: [
                { color: '#205c90' },
            ],
            seriesDefaults: {
                renderer: $.jqplot.BarRenderer,
                useNegativeColors : false,
                pointLabels: {
                    location: "s",
                    show: true,
                    formatString: (currency)?"$%'d" :
                                  (time)?'%.' + (2 ) + 'f':
                                  '%.' + (precision ) + 'f',
                    hideZeros : true,
                },
                fillToZero: true,
            },
            grid: {
                backgroundColor: '#fff'
            },
            canvasOverlay: {
                show: true,
                objects: [
                    { horizontalLine: {
                        name: 'comparator',
                        y: comparator_FY,
                        lineWidthInt: 3,
                        xOffset: 0,
                        color: '#9dbbd9',
                        shadow: false
                    }
                    },
                    { horizontalLine: {
                        name: 'target',
                        y: target_FY,
                        lineWidth: lineWidthInt,
                        xOffset: 0,
                        color: '#205c90',
                        shadow: false
                    }
                    },
                ],
            },
            axes: {
                xaxis: {
                    renderer: $.jqplot.CategoryAxisRenderer,
                    ticks: ticks1
                },
                yaxis: {
                    min: minY,//> 0 ? minY * minBufferMutliplier : minY / minBufferMutliplier,
                    max: maxY,//* maxBufferMutliplier,
                    tickInterval: tickInterval,
                    tickOptions: (currency)? { formatString: "$%'d" }   :
                                 (time)?     { formatString: '%.' + 2 + 'f' }  :
                                             { formatString: '%.' + precision + 'f' }
                }
            }
        });

        var plot2 = $.jqplot('chart2', [s2, sComparator], {
            seriesDefaults: {
                useNegativeColors : false,
                renderer: $.jqplot.BarRenderer, 
                rendererOptions: {
                    barPadding:15,
                },
                fillToZero: true,
            },
            series: [
                { color: '#205c90',
                  pointLabels: {
                    location: "s",
                    show: true,
                    formatString: (currency)?"$%'d" :
                                  (time)?'%.' + (2 ) + 'f':
                                  '%.' + (precision ) + 'f',
                    hideZeros : true,
                    },
                },
                { color: '#9dbbd9',
                  pointLabels: {
                    location: "s",
                    show: true,
                    formatString: (currency)?"$%'d" :
                                  (time)?'%' + (2 ) + 'f':
                                  '%.' + (precision ) + 'f',
                    hideZeros : true,
                    },
                },
            ],
            grid: {
                backgroundColor: '#fff'
            },
            canvasOverlay: {
                show: true,
                objects: [
                    { horizontalLine: {
                        name: 'target_4',
                        y: target_4,
                        lineWidth: lineWidthInt,
                        xminOffset: chartWidth/4 *3 + 'px',
                        xmaxOffset: '0px',
                        color: '#205c90',
                        shadow: false
                    }
                    },
                    /*{ horizontalLine: {
                        name: 'comparator_4',
                        y: comparator_4,
                        lineWidth: 3,
                        xminOffset: chartWidth/4 *3 + 'px',
                        xmaxOffset: '0px',
                        color: '#9dbbd9',
                        shadow: false
                    }
                    },*/
                ],
            },
            axes: {
                xaxis: {
                    renderer: $.jqplot.CategoryAxisRenderer,
                    ticks: ticks2
                },
                yaxis: {
                    min: minY,//> 0 ? minY * minBufferMutliplier : minY / minBufferMutliplier,
                    max: maxY,//* maxBufferMutliplier,
                    tickInterval: tickInterval,
                    tickOptions: (currency)? { formatString: "$%'d" }   :
                                 (time)?     { formatString: '%.' + 2 + 'f' }  :
                                             { formatString: '%.' + precision + 'f' }
                }
            }
        });
    });
</script>