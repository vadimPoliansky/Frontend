@model IndInv.Models.ViewModels.InventoryViewModel
@using IndInv.Helpers;
@{
    ViewBag.Title = "Details";
    ViewBag.fiscalYear = Model.Fiscal_Year;
}

<div class="container">
    @*<div class="indicatorTitle">@Html.DisplayTextFor(model => model.Indicator)</div>*@
    <div class="chartBackground">
        <div class="row">

            <!--div id="chart1" style="margin-top: 20px; margin-left: 20px; width: 100%; height: 100%;"></div-->
            <div id="chartTest" style="width:100%; height:400px;"></div>

            <pre class="code brush:js"></pre>
        </div>
    </div>
    <div class="row">

        <br />
        <div class="small-6 columns">
            <span class="target">@Html.DisplayTextFor(model => model.Target)</span>
            <span class="targetLabel">Target</span>
        </div>
        <div class="small-6 columns">
            <span class="target">@Html.DisplayTextFor(model => model.Comparator)</span>
            <span class="targetLabel">Comparator</span>
        </div>
    </div>
    <br />
    <div class="row">
        <!--div id="chart2" style="margin-top: 20px; margin-left: 20px; width: 100%; height: 400px;"></div-->
        <pre class="code brush:js"></pre>


        <div class="small-12 columns">
            <table class="targetTable">
                <tr>
                    <td></td>
                    <td style="color: #111; text-align: center">Target</td>
                    <td style="color: #111; text-align: center">Comparator</td>
                </tr>
                <tr>
                    <td>2010</td>
                    <td style="color: #111; text-align: center"></td>
                    <td style="color: #111; text-align: center"></td>
                </tr>
                <tr>
                    <td>2011</td>
                    <td style="color: #111; text-align: center"></td>
                    <td style="color: #111; text-align: center"></td>
                </tr>
                <tr>
                    <td>2012</td>
                    <td style="color: #111; text-align: center"></td>
                    <td style="color: #111; text-align: center"></td>
                </tr>
                <tr>
                    <td>2013</td>
                    <td style="color: #111; text-align: center">@Html.DisplayTextFor(model => model.Target)</td>
                    <td style="color: #111; text-align: center">@Html.DisplayTextFor(model => model.Comparator)</td>
                </tr>
            </table>
        </div>
    </div>
</div>

<script src="../../Scripts/jquery-1.11.0.min.js"></script>
<!--script src="../../Scripts/jquery.jqplot.min.js"></script-->

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script src="http://code.highcharts.com/highcharts.js"></script>
<script src="http://code.highcharts.com/modules/exporting.js"></script>

<!--[if lt IE 9]><script language="javascript" type="text/javascript" src="../../Scripts/excanvas.js"></script><![endif]-->
<!--script src="../../Scripts/jq_plugins/jqplot.barRenderer.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.categoryAxisRenderer.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.pointLabels.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.canvasOverlay.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.canvasOverlay.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.dateAxisRenderer.min.js"></script-->

<link rel="stylesheet" media="screen" href="../../Scripts/jquery.jqplot.min.css" />

<style type="text/css">

    .container {
        overflow:visible;
    }

    .indicatorTitle {
        font-size:large;
        color:white;
        background:#0094ff;
        padding:20px 10px 20px 10px;
        font-weight:300;
    }

    .chartBackground {
        background-color:#0094ff;
        width:100%;
       padding-bottom:50px;
    }

    .target {
        display: table;
        margin: 0 auto;
        font-size:large;
        font-family: Geneva, Tahoma, Verdana, sans-serif;
        color: #0068b3;
    }

    .targetLabel {
        display: table;
        margin: 0 auto;
        font-size:small;
        font-family: Geneva, Tahoma, Verdana, sans-serif;
        color: #808080;
    }

    .targetTable {
        border:0px;
        width:100%;
        display: table;
        margin-top:20px;
        font-family: Geneva, Tahoma, Verdana, sans-serif;
        color: #222;
        font-size: 0.5em;
        font-size: 0.875rem;
        padding: 0.5625rem 0.625rem;
    }

    .lt-ie9 .targetTable td {
        padding:0.5625em 0.625em;
    }


        .targetTable > tbody > tr > td:first-child, .targetTable > tbody > tr:first-child {
            font-weight:bold;
        }


    .jqplot-point-label 
    {
        font-family: Geneva, Tahoma, Verdana, sans-serif;
        font-size:xx-small !important;
        font-weight:700;
        color:#fff;
        /*background-color:rgba(32,92,144,0.8);*/
        
    }

    .jqplot-axis {
        font-family: Geneva, Tahoma, Verdana, sans-serif;
        font-size:xx-small !important;
        font-weight:700;
        color:#fff;
    }

    .jqplot-target {
        margin:0px !important;
    }

    .jqplot-yaxis {
        margin-left:5px;
    }

    .jqplot-grid-canvas {
        background-color:#0094ff;
        z-index:-100;
        border:none !important;
        padding-bottom:5px;
    }

</style>


<script>
    $(document).ready(function ($) {
        
        
        var currency = false;
        var time = false;
        var precision;

        var valuesArrayString = [
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q1)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q2)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q3)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q4)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_3)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_3)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_2)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_1)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_YTD)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.Target)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.Comparator)).ToString())",
        ];
        for (i = 0; i < valuesArrayString.length; i++) {
            if (valuesArrayString[i] != null) {
                precision = valuesArrayString[i].indexOf('.') != -1 ? valuesArrayString[i].split('.')[1].length : 0;
            }
            /*
            //if(valuesArrayString[i].indexOf("$") != -1){
            if ($.inArray("$", valuesArrayString[i]) != -1) {
                currency=true;
                i = valuesArrayString.length;
            }
            if ($.inArray(":", valuesArrayString[i]) != -1) {
                time=true;
                i = valuesArrayString.length;
            }*/
        }

        @*var valuesArrayLengthString = [
            @Html.DisplayTextFor(model => model.FY_13_14_Q1).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q2).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q3).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q4).ToString().Replace(".","").Length,
        ];
        //var axisLength = Math.max.apply(Math, valuesArrayLengthString);
        //alert(axisLength);*@
        var chartWidth = 300 - 20 - 20;

        var valuesArray = [
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q1)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q1)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q2)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q2)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q3)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q3)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q4)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q4)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_1)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_1)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_2)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_2)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_3)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_3)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_YTD)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_YTD)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Target)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Target)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Comparator)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Comparator)).ToString())", 10)
        ];

        if (!Array.prototype.filter) {
            Array.prototype.filter = function (fun /*, thisp */) {
                "use strict";

                if (this === void 0 || this === null)
                    throw new TypeError();

                var t = Object(this);
                var len = t.length >>> 0;
                if (typeof fun !== "function")
                    throw new TypeError();

                var res = [];
                var thisp = arguments[1];
                for (var i = 0; i < len; i++) {
                    if (i in t) {
                        var val = t[i]; // in case fun mutates this
                        if (fun.call(thisp, val, i, t))
                            res.push(val);
                    }
                }

                return res;
            };
        }

        function remove(arrOriginal, elementToRemove) {
            return arrOriginal.filter(function (el) { return el !== elementToRemove });
        }

        var maxYarray = Math.max.apply(Math, valuesArray) + 0.01;
        var maxY = maxYarray;
        var maxLog = Math.pow(10, Math.floor(Math.log(maxY / 2) / Math.log(10))) / 2
        if (maxY == 1) { precision = 1 }
        maxY = Math.abs(maxYarray) > 1 ? Math.ceil(maxYarray / maxLog) * maxLog : maxYarray;

        var minY = Math.min.apply(Math, remove(valuesArray, 0));
        minY = Math.abs(minY) > 1 ? Math.floor(minY / 10) * 10 : minY
        minY = minY < 0 ? minY : 0;

        var tickInterval = Math.pow(10, Math.floor(Math.log(maxY / 2 - 0.01) / Math.log(10)));
        tickInterval = maxY / tickInterval > 10 ? tickInterval * 2 : tickInterval;
        tickInterval = maxY / tickInterval < 5 ? tickInterval / 2 : tickInterval;
        maxY = maxY % tickInterval === 0 ? maxY : maxY + tickInterval / 2;
        maxY = maxY / maxYarray > 2 ? maxY / 2 : maxY;

        var s1 = [
            valuesArray[0],
            valuesArray[1],
            valuesArray[2],
            valuesArray[3],
        ];
        var s2 = [
            valuesArray[4],
            valuesArray[5],
            valuesArray[6],
            valuesArray[7],
        ];

        var sComparator = [
            0,
            0,
            0,
            valuesArray[9],
        ];

        var comparator_FY = valuesArray[9]
        var target_FY = valuesArray[8]

        var target_4 = valuesArray[8]

        var ticks1 = ['Q1', 'Q2', 'Q3', 'Q4'];
        var ticks2 = ['FY2010', 'FY2011', 'FY2012', 'FY2013 YTD'];

        $(function () {
            $('#chartTest').highcharts({
                colors: [ '#fff'],
                chart: {
                    type: 'column',
                    backgroundColor: "#0094ff"
                },
                title: {
                    text: '@Html.DisplayTextFor(model => model.Indicator)'
                },
                xAxis: {
                    categories: ticks1,
                    tickLength: 0
                },
                yAxis: {
                    title: {
                        text: ''
                    }
                },
                series: [{
                    name: '@Html.DisplayTextFor(model => model.Indicator)',
                    data: s1,
                }],
                legend: [{
                    enabled:'false'
                }],
                credits: [{
                    enabled: 'false'
                }]
            });
        });
    });
</script>