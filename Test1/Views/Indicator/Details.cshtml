@model IndInv.Models.ViewModels.InventoryViewModel
@using IndInv.Helpers;
@{
    ViewBag.Title = "Details";
    ViewBag.fiscalYear = Model.Fiscal_Year;
}


<div id="chart1" style="margin-top:20px; margin-left:20px; width:100%; height:100%;"></div>
<pre class="code brush:js"></pre>
<div class="row">
<br />
<div class="small-offset-1">
<table>
    <tr>
        <td>Target</td>
        <td>Comparator</td>
    </tr>
    <tr>
        <td style="color:#111">@Html.DisplayTextFor(model => model.Target)</td>
        <td style="color:#111">@Html.DisplayTextFor(model => model.Comparator)</td>
    </tr>
</table>
</div>
</div>

<div id="chart2" style="margin-top:20px; margin-left:20px; width:100%; height:400px;"></div>
<pre class="code brush:js"></pre>
<div class="row">
<br />
<div class="small-offset-1">
<table>
    <tr>
        <td></td>
        <td style="color:#111; text-align:center">Target</td>
        <td style="color:#111; text-align:center">Comparator</td>
    </tr>
    <tr>
        <td>2010</td>
        <td style="color:#111; text-align:center"></td>
        <td style="color:#111; text-align:center"></td>
    </tr>
    <tr>
        <td>2011</td>
        <td style="color:#111; text-align:center"></td>
        <td style="color:#111; text-align:center"></td>
    </tr>
    <tr>
        <td>2012</td>
        <td style="color:#111; text-align:center"></td>
        <td style="color:#111; text-align:center"></td>
    </tr>
    <tr>
        <td>2013</td>
        <td style="color:#111; text-align:center">@Html.DisplayTextFor(model => model.Target)</td>
        <td style="color:#111; text-align:center">@Html.DisplayTextFor(model => model.Comparator)</td>
    </tr>
</table>
</div>
</div>


<script src="../../Scripts/jquery-1.11.0.min.js"></script>
<script src="../../Scripts/jquery.jqplot.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.barRenderer.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.categoryAxisRenderer.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.pointLabels.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.canvasOverlay.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.canvasOverlay.min.js"></script>
<script src="../../Scripts/jq_plugins/jqplot.dateAxisRenderer.min.js"></script>

<link rel="stylesheet" media="screen" href="../../Scripts/jquery.jqplot.min.css" />

<style type="text/css">
    .jqplot-point-label 
    {
        font-family: Geneva, Tahoma, Verdana, sans-serif;
        font-size:xx-small !important;
        font-weight:700;
        color:#fff;
        /*background-color:rgba(32,92,144,0.8);*/
        
    }

    .jqplot-axis {
        font-family: Geneva, Tahoma, Verdana, sans-serif;
        font-size:xx-small !important;
        font-weight:700;
        color:#fff;
    }

    .jqplot-target {
        margin:0px !important;
    }

    .jqplot-yaxis {
        margin-left:5px;
    }

    .jqplot-grid-canvas {
        background-color:#0094ff;
        z-index:-100;
        border:none !important;
        padding-bottom:5px;
    }


</style>


<script>
    $(document).ready(function ($) {

        var lineWidthInt = 2;

        var currency=false;
        var time=false;
        var precision;

        var valuesArrayString = [
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q1)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q2)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q3)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_Q4)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_3)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_3)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_2)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_1)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.FY_YTD)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.Target)).ToString())",
            "@Colour.getNum((Html.DisplayTextFor(model => model.Comparator)).ToString())",
        ];
        for(i=0;i<valuesArrayString.length;i++){
            if (valuesArrayString[i] != null) {
                precision = valuesArrayString[i].indexOf('.') != -1 ? valuesArrayString[i].split('.')[1].length : 0;
            }

            if(valuesArrayString[i].indexOf("$") != -1){
                currency=true;
                i = valuesArrayString.length;
            }
            if(valuesArrayString[i].indexOf(":") != -1){
                time=true;
                i = valuesArrayString.length;
            }
        }

        @*var valuesArrayLengthString = [
            @Html.DisplayTextFor(model => model.FY_13_14_Q1).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q2).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q3).ToString().Replace(".","").Length,
            @Html.DisplayTextFor(model => model.FY_13_14_Q4).ToString().Replace(".","").Length,
        ];
        //var axisLength = Math.max.apply(Math, valuesArrayLengthString);
        //alert(axisLength);*@
        var chartWidth = 300 - 20 - 20;

        var valuesArray = [
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q1)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q1)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q2)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q2)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q3)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q3)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q4)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_Q4)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_1)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_1)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_2)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_2)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_3)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_3)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_YTD)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.FY_YTD)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Target)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Target)).ToString())", 10),
                isNaN(parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Comparator)).ToString())", 10)) ?
                    0 : parseFloat("@Colour.getNum((@Html.DisplayTextFor(model => model.Comparator)).ToString())", 10)
        ];

        function remove(arrOriginal, elementToRemove) {
            return arrOriginal.filter(function (el) { return el !== elementToRemove });
        }

        var maxYarray = Math.max.apply(Math, valuesArray)+0.01;
        var maxY = maxYarray;
        var maxLog = Math.pow(10,Math.floor(Math.log(maxY / 2)/Math.log(10)))/2
        if (maxY == 1){ precision = 1 }
        maxY = Math.abs(maxYarray) > 1 ? Math.ceil(maxYarray/maxLog)*maxLog : maxYarray;

        var minY = Math.min.apply(Math, remove(valuesArray, 0));
        minY = Math.abs(minY) > 1 ? Math.floor(minY/10)*10 : minY
        minY = minY < 0 ? minY : 0;

        var tickInterval = Math.pow(10,Math.floor(Math.log(maxY/2 - 0.01)/Math.log(10)));
        tickInterval = maxY / tickInterval > 10 ? tickInterval * 2 : tickInterval;
        tickInterval = maxY / tickInterval < 5 ? tickInterval / 2 : tickInterval;
        maxY = maxY % tickInterval === 0 ? maxY : maxY + tickInterval/2;
        maxY = maxY / maxYarray > 2 ? maxY / 2 : maxY;
        
        var s1 = [
                valuesArray[0],
                valuesArray[1],
                valuesArray[2],
                valuesArray[3],
            ];
        var s2 = [
                valuesArray[4],
                valuesArray[5],
                valuesArray[6],
                valuesArray[7],
            ];
        var sComparator = [
            0,
            0,
            0,
            valuesArray[9],
        ];
        
        var comparator_FY = valuesArray[9]
        var target_FY = valuesArray[8]

        var target_4 = valuesArray[8]

        var ticks1 = ['Q1', 'Q2', 'Q3', 'Q4'];
        var ticks2 = ['FY2010', 'FY2011', 'FY2012', 'FY2013 YTD'];

        var plot1 = $.jqplot('chart1', [s1], {
            series: [
                { color: '#0068b3' },
            ],
            seriesDefaults: {
                shadow:false,
                renderer: $.jqplot.BarRenderer,
                useNegativeColors : false,
                pointLabels: {
                    location: "s",
                    show: true,
                    formatString: (currency)?"$%'d" :
                                  (time)?'%.' + (2 ) + 'f':
                                  '%.' + (precision ) + 'f',
                    hideZeros : true,
                },
                fillToZero: true,
            },
            grid: {
                drawGridlines: false,
                shadow : false,
                backgroundColor: 'transparent',
                drawBorder: false,
                borderColor: 'transparent',
                shadowColor: 'transparent',
            },
            canvasOverlay: {
                show: true,
                objects: [
                    { horizontalLine: {
                        name: 'comparator',
                        y: comparator_FY,
                        lineWidthInt: 3,
                        xOffset: 0,
                        color: '#fff',
                        shadow: false
                    }
                    },
                    { horizontalLine: {
                        name: 'target',
                        y: target_FY,
                        lineWidth: lineWidthInt,
                        xOffset: 0,
                        color: '#000',
                        shadow: false
                    }
                    },
                ],
            },
            axes: {
                xaxis: {
                    rendererOptions: {
                        tickRenderer: $.jqplot.AxisTickRenderer,
                        tickOptions: {
                            mark: null,
                        },
                        borderWidth: 0,
                        drawBorder: false,
                        borderColor: 'transparent',
                    },
                    renderer: $.jqplot.CategoryAxisRenderer,
                    ticks: ticks1,
                    borderWidth: 0,
                    drawBorder: false,
                    borderColor: 'transparent',
                },
                yaxis: {
                    rendererOptions: {
                        drawBaseline: false,
                        tickRenderer: $.jqplot.AxisTickRenderer,
                        tickOptions: {
                            mark: null,
                        },
                    },
                    min: minY,//> 0 ? minY * minBufferMutliplier : minY / minBufferMutliplier,
                    max: maxY,//* maxBufferMutliplier,
                    tickInterval: tickInterval,
                    tickOptions: (currency)? { formatString: "$%'d" }   :
                                 (time)?     { formatString: '%.' + 2 + 'f' }  :
                                             { formatString: '%.' + precision + 'f' }
                }
            }
        });

        var plot2 = $.jqplot('chart2', [s2, sComparator], {
            seriesDefaults: {
                useNegativeColors : false,
                renderer: $.jqplot.BarRenderer, 
                rendererOptions: {
                    barPadding:15,
                },
                fillToZero: true,
            },
            series: [
                { color: '#205c90',
                  pointLabels: {
                    location: "s",
                    show: true,
                    formatString: (currency)?"$%'d" :
                                  (time)?'%.' + (2 ) + 'f':
                                  '%.' + (precision ) + 'f',
                    hideZeros : true,
                    },
                },
                { color: '#9dbbd9',
                  pointLabels: {
                    location: "s",
                    show: true,
                    formatString: (currency)?"$%'d" :
                                  (time)?'%' + (2 ) + 'f':
                                  '%.' + (precision ) + 'f',
                    hideZeros : true,
                    },
                },
            ],
            grid: {
                drawGridlines: false,
                shadow: false,
                backgroundColor: 'transparent',
                drawBorder: false,
                borderColor: 'transparent',
                shadowColor: 'transparent',
            },
            canvasOverlay: {
                show: true,
                objects: [
                    { horizontalLine: {
                        name: 'target_4',
                        y: target_4,
                        lineWidth: lineWidthInt,
                        xminOffset: chartWidth/4 *3 + 'px',
                        xmaxOffset: '0px',
                        color: '#205c90',
                        shadow: false
                    }
                    },
                    /*{ horizontalLine: {
                        name: 'comparator_4',
                        y: comparator_4,
                        lineWidth: 3,
                        xminOffset: chartWidth/4 *3 + 'px',
                        xmaxOffset: '0px',
                        color: '#9dbbd9',
                        shadow: false
                    }
                    },*/
                ],
            },
            axes: {
                xaxis: {
                    rendererOptions: {
                        tickRenderer: $.jqplot.AxisTickRenderer,
                        tickOptions: {
                            mark: null,
                        },
                        borderWidth: 0,
                        drawBorder: false,
                        borderColor: 'transparent',
                    },
                    renderer: $.jqplot.CategoryAxisRenderer,
                    ticks: ticks1,
                    borderWidth: 0,
                    drawBorder: false,
                    borderColor: 'transparent',
                },
                yaxis: {
                    rendererOptions: {
                        drawBaseline: false,
                        tickRenderer: $.jqplot.AxisTickRenderer,
                        tickOptions: {
                            mark: null,
                        },
                    },
                    min: minY,//> 0 ? minY * minBufferMutliplier : minY / minBufferMutliplier,
                    max: maxY,//* maxBufferMutliplier,
                    tickInterval: tickInterval,
                    tickOptions: (currency) ? { formatString: "$%'d" } :
                                 (time) ? { formatString: '%.' + 2 + 'f' } :
                                             { formatString: '%.' + precision + 'f' }
                }
            }
        });

    });
</script>